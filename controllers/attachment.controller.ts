import * as express from 'express';
import * as multer from 'multer';
import { AttachmentRepository } from '../attachment/attachment.repository';
import { System } from '../shared/system';
import { IAttachmentModel } from '../attachment';
import { DuuzraRouteHandler } from '../shared/security/route.handler';

const upload = multer({storage: multer.memoryStorage()});

/**
 * Controller functions for document attachments
 *
 * @export
 * @class AttachmentController
 * @deprecated This controller is to be fully replaced by a web socket route
 */
export class AttachmentController {

    /**
     * References the Express Router
     *
     * @private
     * @type {express.Router}
     */
    private router: express.Router;

    /**
     * Creates an instance of ApplicationController.
     *
     * @param {express.Router} router The application router
     */
     constructor(routeHandler: DuuzraRouteHandler) {
        this.router = routeHandler.router;

        this.router.get('/attachment/:documentId/:name', this.read);
        this.router.post('/attachment/:documentId', upload.any(), this.create);
        this.router.put('/attachment/:documentId', upload.any(), this.create);
        this.router.delete('/attachment/:documentId/:name', this.delete);
    }

    /**
     * Reads attachment items from the system
     *
     * @param {express.Request} req The API request
     * @param {express.Response} res The API response
     */
    public read = (req: express.Request, res: express.Response): void => {

        // Create a new attachment with file param values
        let doc = new AttachmentRepository(req.params.documentId);
        doc.name = req.params.name;

        doc.get()
            .then((resp: IAttachmentModel) => {
                let fileName = req.params.documentId + '_' + resp.name + '.' + resp.contentType.split('/').pop();
                res.set('Content-Type', resp.contentType);
                res.set('Content-Length', resp.contentLength);
                res.set('Content-Disposition', 'filename="' + fileName + '"');
                res.set('ETag', resp._rev);
                res.send(resp.buffer);
            })
            .catch((err) => {
                res.json(err);
            });
    };

    /**
     * Creates an attachment on an item
     *
     * @param eq The API request
     * @param {express.Response} res The API response
     */
    public create = (req, res: express.Response): void => {
        System.DB.getRevision(req.params.documentId)
            .then((revision: string) => {

                // Create a new attachment with file param values
                let doc = new AttachmentRepository(req.params.documentId, revision);

                let file = req.files[0];
                doc.contentType = file.mimetype;
                doc.contentLength = file.size;
                doc.buffer = file.buffer;
                doc.name = file.fieldname;

                doc.save()
                    .then((resp) => {
                        res.json(resp);
                    })
                    .catch((err) => {
                        res.json(err);
                    });
            })
            .catch((err) => {
                res.json(err);
            });
    };

    /**
     * Deletes an attachment from an item
     *
     * @param {express.Request} req The API request
     * @param {express.Response} res The API response
     */
    public delete = (req: express.Request, res: express.Response): void => {
        System.DB.getRevision(req.params.documentId)
            .then((revision: string) => {

                // Create a new attachment with file param values
                let doc = new AttachmentRepository(req.params.documentId, revision);
                doc.name = req.params.name;

                doc.delete()
                    .then((resp) => {
                        res.json(resp);
                    })
                    .catch((err) => {
                        res.json(err);
                    });
            })
            .catch((err) => {
                res.json(err);
            });
    };

    /**
     * Return the routes generated by the directory controller
     */
    public getRoutes = (): express.Router => {
        return this.router;
    };
}
